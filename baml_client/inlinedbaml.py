###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "classifier.baml": "// Defining a data model.\nenum Tools {\n  // We'll define these in python\n  @@dynamic\n\n  @@alias(ToolCategory)\n}\n\nclass Classification {\n  category Tools\n  reason string\n}\n\n\n\n// Creating a function to extract the resume from a string.\nfunction Classify(tool: string, description: string, count: int) -> Classification[] {\n  client FastOpenAI\n  prompt #\"\n    Given tools and their descriptions, classify the tools into categories.\n    {{ ctx.output_format(enum_value_prefix=null) }}\n\n    {% if count > 1 %}\n    Give me the {{ count }} best options.\n    {% endif %}\n\n    {{ _.role('user') }}\n    Tool: {{ tool }}\n    Description: {{ description }}\n  \"#\n}\n",
    "clients.baml": "client<llm> GPT4 {\n  provider openai\n  options {\n    model \"gpt-4\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Claude {\n  provider anthropic\n  options {\n    model \"claude-3-opus-20240229\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> FastAnthropic {\n  provider anthropic\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> FastOpenAI {\n  provider openai\n  options {\n    model \"gpt-3.5-turbo\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\n\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [FastAnthropic, FastOpenAI]\n  }\n}\n\nclient<llm> Openai {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [GPT4, FastOpenAI]\n  }\n}",
    "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"typescript\", \"python-pydantic\", \"ruby\"\n    output_type \"python/pydantic\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n}\n        ",
}

def get_baml_files():
    return file_map